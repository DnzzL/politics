//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Query = newQueryTable("", "query", "")

type queryTable struct {
	sqlite.Table

	// Columns
	ID   sqlite.ColumnInteger
	Text sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type QueryTable struct {
	queryTable

	EXCLUDED queryTable
}

// AS creates new QueryTable with assigned alias
func (a QueryTable) AS(alias string) *QueryTable {
	return newQueryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QueryTable with assigned schema name
func (a QueryTable) FromSchema(schemaName string) *QueryTable {
	return newQueryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QueryTable with assigned table prefix
func (a QueryTable) WithPrefix(prefix string) *QueryTable {
	return newQueryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QueryTable with assigned table suffix
func (a QueryTable) WithSuffix(suffix string) *QueryTable {
	return newQueryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQueryTable(schemaName, tableName, alias string) *QueryTable {
	return &QueryTable{
		queryTable: newQueryTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newQueryTableImpl("", "excluded", ""),
	}
}

func newQueryTableImpl(schemaName, tableName, alias string) queryTable {
	var (
		IDColumn       = sqlite.IntegerColumn("id")
		TextColumn     = sqlite.StringColumn("text")
		allColumns     = sqlite.ColumnList{IDColumn, TextColumn}
		mutableColumns = sqlite.ColumnList{TextColumn}
	)

	return queryTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Text: TextColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
