//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Party = newPartyTable("", "party", "")

type partyTable struct {
	sqlite.Table

	// Columns
	ID       sqlite.ColumnInteger
	Name     sqlite.ColumnString
	Website  sqlite.ColumnString
	LogoPath sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type PartyTable struct {
	partyTable

	EXCLUDED partyTable
}

// AS creates new PartyTable with assigned alias
func (a PartyTable) AS(alias string) *PartyTable {
	return newPartyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PartyTable with assigned schema name
func (a PartyTable) FromSchema(schemaName string) *PartyTable {
	return newPartyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PartyTable with assigned table prefix
func (a PartyTable) WithPrefix(prefix string) *PartyTable {
	return newPartyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PartyTable with assigned table suffix
func (a PartyTable) WithSuffix(suffix string) *PartyTable {
	return newPartyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPartyTable(schemaName, tableName, alias string) *PartyTable {
	return &PartyTable{
		partyTable: newPartyTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newPartyTableImpl("", "excluded", ""),
	}
}

func newPartyTableImpl(schemaName, tableName, alias string) partyTable {
	var (
		IDColumn       = sqlite.IntegerColumn("id")
		NameColumn     = sqlite.StringColumn("name")
		WebsiteColumn  = sqlite.StringColumn("website")
		LogoPathColumn = sqlite.StringColumn("logoPath")
		allColumns     = sqlite.ColumnList{IDColumn, NameColumn, WebsiteColumn, LogoPathColumn}
		mutableColumns = sqlite.ColumnList{NameColumn, WebsiteColumn, LogoPathColumn}
	)

	return partyTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Name:     NameColumn,
		Website:  WebsiteColumn,
		LogoPath: LogoPathColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
